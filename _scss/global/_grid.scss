// --------------------------------------------------
// Bootstrap Grid
// --------------------------------------------------
// TABLE OF CONTENTS
// - Container
// - Row
// - Column

// Fluid grid
//
// Utilizes the mixin meant for fixed width grid, but without any defined
// width for fluid, full width layouts.
.g--grid {
  @include clearfix();
  margin-right: auto;
  margin-left: auto;
}

// Container widths
//
// Set the grid width, and override it for fixed navbars in media queries.
.g--grid-fixed {
  @extend .g--grid;
  width: 100%;

  @media (min-width: map-get($v--grid-breakpoints, sm)) {
    width: map-get($v--grid-max-widths, sm);
  }

  @media (min-width: map-get($v--grid-breakpoints, md)) {
    width: map-get($v--grid-max-widths, md);
  }

  @media (min-width: map-get($v--grid-breakpoints, lg)) {
    width: map-get($v--grid-max-widths, lg);
  }

  @media (min-width: map-get($v--grid-breakpoints, xl)) {
    width: map-get($v--grid-max-widths, xl);
  }
}

// Row
//
// Rows contain and clear the floats of your columns.
.g--grid_row {
  @include clearfix();
  margin-left: ceil(($v--grid-gutter-width / -2));
  margin-right: floor(($v--grid-gutter-width / -2));
}

// Column
.g--grid_col-0,
.g--grid_col-xs-0 {
  display: none;
}

@media (min-width: map-get($v--grid-breakpoints, sm)) {
  .g--grid_col-sm-0 {
    display: none;
  }
}

@media (min-width: map-get($v--grid-breakpoints, md)) {
  .g--grid_col-md-0 {
    display: none;
  }
}

@media (min-width: map-get($v--grid-breakpoints, lg)) {
  .g--grid_col-lg-0 {
    display: none;
  }
}

@media (min-width: map-get($v--grid-breakpoints, xl)) {
  .g--grid_col-xl-0 {
    display: none;
  }
}

@for $i from 1 through $v--grid-columns {
  .g--grid_col-#{$i},
  .g--grid_col-xs-#{$i},
  .g--grid_col-sm-#{$i},
  .g--grid_col-md-#{$i},
  .g--grid_col-lg-#{$i},
  .g--grid_col-xl-#{$i} {
    position: relative;
    min-height: 1px; // prevent cols from collapsing when empty
    padding-left:  ceil(($v--grid-gutter-width / 2)); // inner gutter via padding
    padding-right: floor(($v--grid-gutter-width / 2)); // inner gutter via padding
    width: 100%;
    float: left;
  }

  .g--grid_col-#{$i},
  .g--grid_col-xs-#{$i} {
    max-width: percentage(($i / $v--grid-columns));
  }

  .g--grid_push-#{$i},
  .g--grid_push-xs-#{$i} {
    margin-left: percentage(($i / $v--grid-columns));
  }

  .g--grid_pull-#{$i},
  .g--grid_pull-xs-#{$i} {
    margin-left: percentage(($i / $v--grid-columns)) * -1;
  }
}

@media (min-width: map-get($v--grid-breakpoints, sm)) {
  @for $i from 1 through $v--grid-columns {
    .g--grid_col-sm-#{$i} {
        display: block;
        max-width: percentage(($i / $v--grid-columns));
    }

    .g--grid_push-sm-#{$i} {
      margin-left: percentage(($i / $v--grid-columns));
    }

    .g--grid_pull-sm-#{$i} {
      margin-left: percentage(($i / $v--grid-columns)) * -1;
    }
  }
}

@media (min-width: map-get($v--grid-breakpoints, md)) {
  @for $i from 1 through $v--grid-columns {
    .g--grid_col-md-#{$i} {
        display: block;
        max-width: percentage(($i / $v--grid-columns));
    }

    .g--grid_push-md-#{$i} {
      margin-left: percentage(($i / $v--grid-columns));
    }

    .g--grid_pull-md-#{$i} {
      margin-left: percentage(($i / $v--grid-columns)) * -1;
    }
  }
}

@media (min-width: map-get($v--grid-breakpoints, lg)) {
  @for $i from 1 through $v--grid-columns {
    .g--grid_col-lg-#{$i} {
        display: block;
        max-width: percentage(($i / $v--grid-columns));
    }

    .g--grid_push-lg-#{$i} {
      margin-left: percentage(($i / $v--grid-columns));
    }

    .g--grid_pull-lg-#{$i} {
      margin-left: percentage(($i / $v--grid-columns)) * -1;
    }
  }
}

@media (min-width: map-get($v--grid-breakpoints, xl)) {
  @for $i from 1 through $v--grid-columns {
    .g--grid_col-xl-#{$i} {
        display: block;
        max-width: percentage(($i / $v--grid-columns));
    }

    .g--grid_push-xl-#{$i} {
      margin-left: percentage(($i / $v--grid-columns));
    }

    .g--grid_pull-xl-#{$i} {
      margin-left: percentage(($i / $v--grid-columns)) * -1;
    }
  }
}

.g--grid_push-0,
.g--grid_push-xs-0,
.g--grid_push-sm-0,
.g--grid_push-md-0,
.g--grid_push-lg-0,
.g--grid_pull-0,
.g--grid_pull-xs-0,
.g--grid_pull-sm-0,
.g--grid_pull-md-0,
.g--grid_pull-lg-0 {
  margin-left: 0;
}
